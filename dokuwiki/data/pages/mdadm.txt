Pour faire des essais, créons qqs fakedisk

le plus simple est de faire des "disques" de 1G

la commande
   dd if=/dev/zero of=fakedisk_a bs=1G count=1
fera l'affaire mais sera lente

tandis que:
   dd if=/dev/zero of=faka count=1 seek=2M
sera quasi instantanée, elle crée un fichier de 1G après avoir "avancé" instantanément de 2 millions (seek=2M)
de bloc de 512 octets.

faisons trois fakedisks de 1G, et trois fakedisks de 1.5 Gigas
  dd if=/dev/zero of=faka count=1 seek=2M
  dd if=/dev/zero of=fakb count=1 seek=2M
  dd if=/dev/zero of=fakc count=1 seek=2M   
  
  dd if=/dev/zero of=fakd count=1 seek=3M
  dd if=/dev/zero of=fake count=1 seek=3M
  dd if=/dev/zero of=fakf count=1 seek=3M

  big data # ls -lh fak?
  -rw-r--r-- 1 root root 1.1G Apr 26 15:59 faka
  -rw-r--r-- 1 root root 1.1G Apr 26 16:00 fakb
  -rw-r--r-- 1 root root 1.1G Apr 26 16:01 fakc
  -rw-r--r-- 1 root root 1.6G Apr 26 16:06 fakd
  -rw-r--r-- 1 root root 1.6G Apr 26 16:06 fake
  -rw-r--r-- 1 root root 1.6G Apr 26 16:06 fakf
  big data # 


L'idée est de faire comme si nous disposions de 6 disques
qu'il faut faire apparaître comme des périphériques, pour cela nous créons 6 "loop"
avec les commandes
  big data # losetup -f faka
  big data # losetup -f fakb
  big data # losetup -f fakc
  big data # losetup -f fakd
  big data # losetup -f fake
  big data # losetup -f fakf
  big data # losetup -la
  NAME       SIZELIMIT OFFSET AUTOCLEAR RO BACK-FILE
  /dev/loop0         0      0         1  1 /boot/srcd.iso
  /dev/loop1         0      0         0  0 /data/faka
  /dev/loop2         0      0         0  0 /data/fakb
  /dev/loop3         0      0         0  0 /data/fakc
  /dev/loop4         0      0         0  0 /data/fakd
  /dev/loop5         0      0         0  0 /data/fake
  /dev/loop6         0      0         0  0 /data/fakf
  big data # 

On constate que les 6 loops ont été créées, et correspondent aux pseudo-disques /dev/loop1,2,..,6

(Il y avait dans l'exemple ci-dessus déjà un pseudo disk loop0 )

Nous allons créer un disque raid5 avec les 3 premiers disques de 1Giga
  le pseudo disque raid assemblé s'appellera md100
  le niveau de raid (level) sera égal à 5 (-l 5)
  il sera constitué de 3 disques (-n 3)
  ces disques sont /dev/loop1, /dev/loop2, /dev/loop3
  
  !! attention il est très probable que ces chiffres soient différent dans votre situation !!
  
Il est fortement recommandé, dans un autre xterm de lancer la commande
  watch cat /proc/mdstat
Afin d'avoir une vision dynamique de l'état de vos disques raid.

  mdadm --create md100 -l 5 -n 3  /dev/loop2 /dev/loop1 /dev/loop3

vous verrez le périphérique md100 se créer et se "synchroniser"
en l'occurrence  c'est inutile vu qu'il s'agit d'un nouveau raid, il est inutile de le vérifier, nous aurions pu ajouter à la commande de création l'option "--assume-clean" pour accélérer le processus

  __A Faire__
   regarder le contenu de /dev/md/
   fdisk -l /dev/md100
   
Nous avons bien un disque de 2Gigas !

ce disque peut être partitionné mais les partitions ne seront pas numérotées comme pour des disques durs physiques réels (sda1, sda2) elles seraient numérotées md100p1, md100p2 etc

Pour la simplicité nous utiliserons l'entièreté du disque md100
il suffit de le formater pour pouvoir le monter
  mkfs.xfs /dev/md/md100  
  mount /dev/md100 /mnt/__quelquepart__  (ce que vous voulez comme point de montage)
  
simulons maintenant une panne d'un des disques de 1Giga
  mdadm --manage /dev/md/md100 --fail /dev/loop1

le système tient... il ne manque qu'un disque.. 
constatez ce qui apparait dans la fenêtre d'état du raid.

Ajoutons mainteant un nouveau disque au raid mais prenos cette fois ci un disque
de 1.5 Giga, d'abord enlevons le disque "mort"
  mdadm --manage /dev/md/md100 --rem /dev/loop1
puis ajoutons le disque4
  mdadm --manage /dev/md/md100 --add /dev/loop4
Observez la "reconstruction" du disque md100

Ajoutons les 2 autres disque de 1.5 giga au raid. Ils ne seront aps utilisé mais seront là prêt au cas où une panne survient.
  mdadm --manage /dev/md/md100 --add /dev/loop5
  mdadm --manage /dev/md/md100 --add /dev/loop6
Constatez le mode "Spare" (secours) pour ces 2 nouveaux disques dans la fenêtre d'observation

Déclenchons une nouvelle panne, du disque 2 (1Giga)
  mdadm --manage /dev/md/md100 --fail /dev/loop2
Le système déclenche automatiquement la reconstruction du raid en utilisant un des disques "spare"

!! il est important d'attendre que la reconstruction soit achevée avant de déclencher la dernière panne du dernier disque de 1Giga !!

  mdadm --manage /dev/md/md100 --fail /dev/loop3
  
  
Nous pouvons maintenant retirer les loop2 et 3 du raid
  big ~ # mdadm --manage /dev/md/md100 --rem /dev/loop2
  mdadm: hot removed /dev/loop2 from /dev/md/md100
  big ~ # mdadm --manage /dev/md/md100 --rem /dev/loop3
  mdadm: hot removed /dev/loop3 from /dev/md/md100
  big ~ # 


Les trois disques du raid ont été remplacés par des disques plus grands...
En théorie notre disque devrait pouvoir avoir une capacité de 3Gigas, mais il en a toujours que 2.

Il a été initialisé pour une taille de 2Gigas, les disques plus grands que nous avons incorporés ne sont pas exploités au maximum, c'est normal ils étaient là en guise de secours.

L'important est que le système a conservé le disque md100 monté, les données qu'il contient ont toujours été accessibles.

Il existe un moyen d'étendre le "container raid" pour profiter du fait que les disques sous-jacents sont maintenant plus grand (disques 4,5,6) que les disques d'origine (1,2,3).
  big ~ # mdadm --grow /dev/md/md100 --size=max
  mdadm: component size of /dev/md/md100 has been set to 1571840K
  unfreeze
  big ~ #

Cependant le file system XFS a lui était fait sur un disque de 2Giga, et ne contiendra donc pas plus.

Il existe aussi un moyen d'agrandir un filesystem XFS pour qu'il prenne l'espace disponible à sa suite, c'est la commande :
  xfs_growfs /dev/md/md100

Après quoi, quand le xfs_grow est complété, regardez le résultat de df -h

vous y verrez un filesystem de 3giga

Le tout sans avoir jamais arrêté la machine !

Ceci était pour le XFS, qui ne peut qu'être agrandi ! jamais réduit.
[[ instruction pour l'ext3 ]] [[ instruction pour l'ext4 ]] [[ instruction pour reiserfs ]]

pour stopper le raid
  umount le disque raid
  mdadm --stop /dev/md/md100
détacher les loop
  losetup -d /dev/loop1 etc etc


[[  instruction pour ajouter un disque au raid  ]]
